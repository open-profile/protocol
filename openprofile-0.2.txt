OpenProfile 0.2 WORKING

Date: 26 December 2012
Version: 0.2
Authors: Dirk Gadsden
Copyright: 2012 Dirk Gadsden; see LICENSE for more information.


Table of Contents

1: Introduction
2: Format
3: Function
4: Header
4.1: Key
4.2: Signature
4.3: Nonce
5: Providers
5.1: Provider Handshakes
5.1.1: Unknown-Secret Provider-Provider Handshake
5.1.1.1: Initiation
5.1.1.2: Challenge
5.1.1.3: Challenge Response
5.1.1.4: Initiation Response
5.1.1.5: Post-initiation
6: Profiles
6.1: Handshakes
6.1.1: Provider-Pre-Negotiated Profile-Profile Handshake
6.1.1.1: Initiation
6.1.1.2: Initiation Response
6.1.1.3: Accept
6.1.1.4: Deny
6.1.1.5: Lifecycle
6.2: Data
6.2.1: Objects


1: Introduction

OpenProfile (abbreviated OP) is a protocol for distributed identity and authentication. Emphasizing flexibility and namespace-encapsulation data and functionality, the protocol is designed for maximum applicability and a high degree of future-proofedness.

Although HTTP is the de facto-standard transport, transport agnosticism is important for providing maximum flexibility and performance. JSON is the standard for storing data; providers are encouraged to minimize any abstractions on top of this layer.

2: Format

All data should be formatted as JSON and sent with JSON-appropriate headers. Transports should support the create-read-update-delete object persistence pattern as closely as possible.

3: Function

An OpenProfile profile consists of a base JSON document providing the namespace for the document (for OpenProfile version 0.2 the namespace is "openprofile-0.2"), a provider-level unique identifier ("uid") for the profile, a list of provider end-points, and a list of profile endpoints. An example basic profile is below:

{
	"namespace": "openprofile-0.2",
	"uid": "dirk",
	"provider": ["http://profile.org"],
	"profile": ["http://profile.org/dirk"],
	"data": [...]
}

Continuing from this example, an HTTP GET request to http://profile.org/dirk should always return this document (for usability purposes, returning a styled HTML document to requests with a user-agent that concretely identifies the requester as a browser is allowed). This document is called the public version of the profile, and should always be available and always provide this information. Providers or services wishing to engage in further communication with the profile and the profile's provider must perform a handshake. More information about a profile and its formatting a capabilities is provided in 6: Profile.

4: Header

Every request within a handshake will contain a header, which is a combination of a signature and a set of key-value pairs. Header keys and values may only contain ASCII letters, numbers, periods ("."), underscores ("_"), and dashes ("-"). Keys are joined to their respective values with equals ("="), and key-value pairs are separated by commas (","). The key-value pairs MUST BE IN ALPHABETICAL ORDER BY KEY. This makes it so that the signature/secret, headers, and document can be easily split apart using common limited string split functions (ie. 'data.split(":", 3)'). It is also meant to ensure that headers are only used for the small amount of extra data relating directly to the request, with document-related data stored inside the document and transport-related data stored inside the transport's own header mechanisms. You should never include any information in the header besides the specific key-value items listed in the corresponding OpenProfile version's specification.

The presence or absence of a header should be tested for by checking the first character of the response document. If it is a curly brace ("{") then there is no header and the entire document should be parsed as JSON. Otherwise it should be assumed to have a header and be split into 3 parts, have its second and third parts split into key-value pairs and parsed as JSON respectively, and then have the signature in the first part verified.

4.1: Key ("key", Required inside key-value pairs)

This key identifies the handshake and should be used by both parties to look up the handshake's secret. The key is a random alphanumeric string 32-256 characters long.

4.2: Signature (Required as first part of header)

The signature is calculated by generating the rest of the document, then prepending it with the secret and a colon ("SECRET:HEADER:{...}"). The SHA1 hash of that string should then be calculated and prepended to the origin document followed by a colon ("SIGNATURE:HEADER:{...}")

4.3: Nonce ("nonce", Optional inside key-value pairs)

IN PROGRESS

5: Providers

5.1: Provider Handshakes

5.1.1: Unknown-Secret Provider-Provider Handshake

A handshake ensures that a provider (the "server") and another provider or service (the "client") are communicating over a secure (but not private) link, ie. the communications between the two cannot be tampered with nor repeated. Ideally, the handshake should be performed over HTTPS or another encrypted protocol, since the handshake is vulnerable to a man-in-the-middle attack unless it is performed over a secure channel. WARNING: This is a KNOWN VULNERABILITY. However, there are more pressing problems to tackle. IF YOU ARE CONCERNED ABOUT SECURITY, PERFORM ALL REQUESTS OVER HTTPS OR SIMILAR SECURE CHANNEL AND DENY ACCESS TO ANY CLIENTS ATTEMPTING TO CONNECT OVER AN INSECURE CHANNEL. The handshake is in place not in place to protect privacy and the security of data, it is in place to make future (post-handshake) man-in-the-middle attacks more difficult and ensure message correctness and orderliness.

5.1.1.1: Initiation

To begin a handshake, the client generates a 32-256 character alphanumeric string called the secret. It also creates a separate random 32-256 character alphanumeric string called the key, which will be used in all subsequent requests to identify the handshake. Then it POST's a request to the /handshake/request path on the provider (http://profile.org/handshake/request).

Headers are calculated using the secret passed in the document.

HEADER:{
	"namespace": "openprofile-0.2",
	"provider": ["http://service.org"],
	"secret": "...",
	"key": "..."
}

5.1.1.2: Challenge

Upon receiving the /handshake/request request from the client, the server will then issue a challenge request (http://service.org/handshake/challenge) to the client to ensure that the client provider named in the request is the one initiating the handshake.

The response is calculated by taking the SHA1 hash of the secret and the challenge, separated by a colon ("SECRET:CHALLENGE"). The server also generates a separate challenge string (32-256 alphanumeric characters).

HEADER:{
	"namespace": "openprofile-0.2",
	"provider": ["http://provider.org"],
	"challenge": "..."
}

5.1.1.3: Challenge Response

If the client successfully validates the response, it should calculate a response to the server's challenge via the same method (SHA1 hash of "SECRET:CHALLENGE").

HEADER:{
	"namespace": "openprofile-0.2",
	"provider": ["http://service.org"],
	"status": "success",
	"response": "..."
}

Otherwise a standard error document should be returned:

{
	"namespace": "openprofile-0.2",
	"provider": ["http://service.org"],
	"status": "failure",
	"message": "(Example) Invalid response"
}

5.1.1.4: Initiation Response

If the server-initiated challenge succeeds, the server should then respond to the still-open initiation request.

A successful handshake response:

HEADER:{
	"namespace": "openprofile-0.2",
	"provider": ["http://profile.org"],
	"status": "success"
}

Following this response, both providers should store the key and secret.

For a failed handshake, the server is not required to return a document with a header. (All error responses do not require headers.)

{
	"namespace": "openprofile-0.2",
	"provider": ["http://profile.org"],
	"status": "failure",
	"message": "(Example) Invalid key"
}

5.1.1.5: Post-initiation

Following a successful handshake initiation, both providers will use headers including their shared key and secret-based signature with all of their requests to each other.

6: Profiles

Every representation of a profile must supply a base amount on information. For example an unauthenticated request to http://profile.org/dirk (or http://profile.org/dirk.json to force JSON response) should return:

{
	"namespace": "openprofile-0.2",
	"uid": "dirk",
	"provider": ["http://profile.org"],
	"profile": ["http://profile.org/dirk"],
	"data": [...]
}

6.1: Handshakes

6.1.1: Provider-Pre-Negotiated Profile-Profile Handshake

Commonly know as a "friend request", this handshake establishes a trusted relationship between two profiles and their providers. WARNING: In the current implementation, a nefarious provider could take advantage of handshakes in a network to reveal information shared between two profiles to a third-party profile that was connected to one of the original two profiles.

For the purposes of clarity, the profile initiating the handshake will be known as Alice and the profile responding to the handshake will be known as Bob.

6.1.1.1: Initiation

The native sends the following request to the foreigner at http://bob.org/bob/handshake/request:

HEADER:{
	"namespace": "openprofile-0.2",
	"uid": "alice",
	"provider": ["http://alice.org"],
	"profile": ["http://alice.org/alice"]
}

6.1.1.2: Initiation Response

If the provider decides to accept the initiation request (depending on Bob's settings, for example), it will respond with the following data to indicate that Bob has received the request and is now deciding on whether or not to accept:

HEADER:{
	"namespace": "openprofile-0.2",
	"uid": "bob",
	"provider": ["http://bob.org"],
	"profile": ["http://bob.org/bob"],
	"status": "success"
}

Or if denied, the server responds with:

HEADER:{
	"namespace": "openprofile-0.2",
	"uid": "bob",
	"provider": ["http://bob.org"],
	"profile": ["http://bob.org/bob"],
	"status": "failure",
	"message": "(Example) Profile not found/Profile not accepting new requests"
}

6.1.1.3: Accept

Once Bob has had time to review the request, he can choose to accept or deny the handshake. To accept, he sends the following request back to Alice at http://alice.org/alice/handshake/accept:

HEADER:{
	"namespace": "openprofile-0.2",
	"uid": "bob",
	"provider": ["http://bob.org"],
	"profile": ["http://bob.org/bob"]
}

6.1.1.4: Deny

To deny the handshake, Bob sends the request to http://alice.org/alice/handshake/deny:

HEADER:{
	"namespace": "openprofile-0.2",
	"uid": "bob",
	"provider": ["http://bob.org"],
	"profile": ["http://bob.org/bob"]
}

6.1.1.5: Lifecycle

A request that is not accepted or denied within 72 hours should be considered denied.

6.2: Data

A profile can optionally contain a data attribute which stores namespaced data objects to add additional functionality and information to the profile. The data attribute must either not be present, null, or an array of objects.

6.2.1: Objects

A basic data object only needs to have one attribute: namespace. Each object must have a unique namespace and conform to the specification laid out by that namespace. For example:

{
	"namespace": "openprofile-0.2",
	"uid": "bob",
	"provider": ["http://bob.org"],
	"profile": ["http://bob.org/bob"],
	"data": [
		{
			"namespace": "openprofile-empty-1.0"
		}
	]
}

The special "openprofile-empty" namespace (with default version 1.0) is a special namespace for a data object containing only the namespace attribute.
